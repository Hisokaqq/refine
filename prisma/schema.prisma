// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Workspace {
  id        String   @id @default(cuid())
  title     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  tabs      Tab[]    // One-to-Many relationship with Tab
  user      User     @relation(fields: [userId], references: [id]) // Many-to-One relationship with User
  userId    String
}

model Tab {
  id          String   @id @default(cuid())
  title       String
  content     String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  workspaceId String
  workspace   Workspace @relation(fields: [workspaceId], references: [id]) // Many-to-One relationship with Workspace
  chat        Chat?
}

model Chat {
  id        String   @id @default(cuid())
  tabId     String   @unique
  tab       Tab      @relation(fields: [tabId], references: [id]) // One-to-One relationship with Tab
  messages  Message[] // One-to-Many relationship with Message
}

model Message {
  id        String   @id @default(cuid())
  content   String
  createdAt DateTime @default(now())
  chatId    String
  chat      Chat @relation(fields: [chatId], references: [id]) // Many-to-One relationship with Chat
}


model User {
  id       String      @id @default(cuid())
  email    String   @unique
  name     String
  role     Role      @default(USER)
  hashedPassword String?
  createdAt DateTime @default(now())
  pictureUrl String?
  sessions Session[]
  workspaces Workspace[]
}

model Session {
  id       String    @id @default(cuid())
  userId    String
  expiresAt DateTime
  user User @relation(fields: [userId], references: [id])
}

enum Role {
  USER
  ADMIN
}

